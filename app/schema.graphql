# Le decimos a graph que recibimos algo de tipo Upload
scalar Upload

type Query {
    prueba: String!
    Users: [User!]
    User(avatar_name: String!): User
    Product(product: String!): Product
    Products: [Product!]
    Order(id: ID!): Order!
    Orders: [Order!]
    UserOrders(avatar_name: String!): [Order]
}

type Mutation {
    SingUp(data: UserCreateInput!): Auth!
    SingIn(email: String!, password: String!): Auth!
    UpdateUser: User
    DeleteUser(avatar_name: String!): User!
    UploadProduct(data: ProductCreateInput!): Product!
    CreateOrder(data: OrderCreateInput!): Order!
    AddProductToOrder(id: String!, product_name: String!): Order
}

type Suscription {
    newComment: Comment!
}

type Comment {
    id: Int!
    text: String!
}

type Auth {
    token: String
    message: String
}

type User {
    id: ID!
    name: String!
    first_name: String!
    last_name: String
    user_name: String!
    avatar_name: String!
    email: String!
    profile_image: String
    gender: Gender!
    is_active: Boolean!
}

type Product {
    id: ID!
    product: String!
    description: String!
    pices: Int!
    price: Float!
    desc: Float!
    is_active: Boolean!
    timestamp: String!
}

type Order {
    id: ID!
    order_owner: User!
    date_creation: String!
    products: [Product!]
    total: Float!
}

enum Gender {
    MALE
    FEMALE
}

input UserCreateInput {
    name: String!
    first_name: String!
    last_name: String
    avatar_name: String!
    email: String!
    password: String!
    gender: Gender!
    is_active: Boolean!
}

input ProductCreateInput {
    product: String!
    description: String!
    pices: Int!
    price: Float!
    desc: Float!
    is_active: Boolean!
}

input OrderCreateInput {
    order_owner: String!
    is_active: Boolean!
    total: Float!
}